name: Checks # The name of the GitHub Action workflow. It can be used to identify the workflow in the Actions tab.
on: [push] # Triggers the workflow when a push event occurs in the repository.

jobs: # Defines the jobs that will be run as part of this workflow.
  test-lint: # The name of the job, in this case, "test-lint".
    name: Test and Lint # A human-readable name for the job (can be seen in the GitHub Actions UI).
    runs-on: ubuntu-latest # Specifies that the job will run on the latest version of Ubuntu.

    steps: # Defines the steps that will be run in this job.
      - name: Login to Docker Hub # Step 1: Log in to Docker Hub to allow pulling/pushing Docker images.
        uses: docker/login-action@v1 # Uses the Docker login action from the GitHub Actions marketplace.
        with: # The input for the Docker login action.
          username: ${{ secrets.DOCKERHUB_USER }} # Docker Hub username stored in GitHub Secrets for security.
          password: ${{ secrets.DOCKERHUB_TOKEN }} # Docker Hub password (or token) stored in GitHub Secrets.

      - name: Checkout # Step 2: Check out the code from the repository to the runner's environment.
        uses: actions/checkout@v2 # Uses the official GitHub checkout action to clone the repository.

      - name: Install Docker Compose # Step 3: Install Docker Compose in the Ubuntu environment.
        run: | # Executes shell commands.
          sudo apt-get update # Update the package list.
          sudo apt-get install -y docker-compose # Install Docker Compose using apt-get.

      - name: Test # Step 4: Run the test suite for the application.
        run: docker-compose run --rm app sh -c "python manage.py wait_for_db && python manage.py test core.tests"
        # This command runs a Docker container for the "app" service defined in docker-compose.yml.
        # --rm: Removes the container after the command is finished.
        # "python manage.py wait_for_db": Ensures the database is ready before running tests.
        # "python manage.py core.tests": Runs the test suite located in the core/tests module.

      - name: Lint # Step 5: Run the linter (flake8) to check the code style.
        run: docker-compose run --rm app sh -c "flake8"
        # This command runs a Docker container for the "app" service.
        # "flake8": Runs the flake8 linter inside the container to check Python code style.
